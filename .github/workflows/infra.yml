name: Construcci√≥n Infrastructura en Azure

env:
  DOTNET_VERSION: '8'                     # la versi√≥n de .NET

on:
  push:
    branches: [ "main" ]
    paths:
      - 'infra/**'
      - '.github/workflows/infra.yml'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: login azure
        run: | 
          az login -u ${{ secrets.AWA_USERNAME }} -p ${{ secrets.AWA_PASSWORD }}
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
      - name: Terraform Init
        id: init
        run: cd Infra && terraform init 
        #-backend-config="resource_group_name=${{secrets.BACKEND_AZURE_RESOURCE_GROUP_NAME}}" -backend-config="storage_account_name=${{secrets.BACKEND_AZURE_STORAGE_ACCOUNT_NAME}}" -backend-config="container_name=${{secrets.BACKEND_AZURE_STORAGE_ACCOUNT_CONTAINER_NAME}}"
    #   - name: Terraform Fmt
    #     id: fmt
    #     run: cd Infra && terraform fmt -check
      - name: Terraform Validate
        id: validate
        run: cd Infra && terraform validate -no-color
    #   - name: tfsec
    #     uses: aquasecurity/tfsec-pr-commenter-action@v1.2.0
    #     with:
    #       tfsec_args: --soft-fail
    #       github_token: ${{ github.token }}
      - name: Terraform Plan
        run: cd Infra && terraform plan -no-color -out main.tfplan

      - name: Create String Output
        id: tf-plan-string
        run: |
            TERRAFORM_PLAN=$(cd Infra && terraform show -no-color main.tfplan)

            delimiter="$(openssl rand -hex 8)"
            echo "summary<<${delimiter}" >> $GITHUB_OUTPUT
            echo "## Terraform Plan Output" >> $GITHUB_OUTPUT
            echo "<details><summary>Click to expand</summary>" >> $GITHUB_OUTPUT
            echo "" >> $GITHUB_OUTPUT
            echo '```terraform' >> $GITHUB_OUTPUT
            echo "$TERRAFORM_PLAN" >> $GITHUB_OUTPUT
            echo '```' >> $GITHUB_OUTPUT
            echo "</details>" >> $GITHUB_OUTPUT
            echo "${delimiter}" >> $GITHUB_OUTPUT

      - name: Publish Terraform Plan to Task Summary
        env:
          SUMMARY: ${{ steps.tf-plan-string.outputs.summary }}
        run: |
          echo "$SUMMARY" >> $GITHUB_STEP_SUMMARY

      - name: Outputs
        id: vars
        run: |
            echo "terramaid_version=$(curl -s https://api.github.com/repos/RoseSecurity/Terramaid/releases/latest | grep tag_name | cut -d '"' -f 4)" >> $GITHUB_OUTPUT
            case "${{ runner.arch }}" in
            "X64" )
                echo "arch=x86_64" >> $GITHUB_OUTPUT
                ;;
            "ARM64" )
                echo "arch=arm64" >> $GITHUB_OUTPUT
                ;;
            esac

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'

      - name: Setup Terramaid
        run: |
            curl -L -o /tmp/terramaid.tar.gz "https://github.com/RoseSecurity/Terramaid/releases/download/${{ steps.vars.outputs.terramaid_version }}/Terramaid_Linux_${{ steps.vars.outputs.arch }}.tar.gz"
            tar -xzvf /tmp/terramaid.tar.gz -C /tmp
            mv -v /tmp/Terramaid /usr/local/bin/terramaid
            chmod +x /usr/local/bin/terramaid

      - name: Terramaid
        id: terramaid
        run: |
            cd Infra
            /usr/local/bin/terramaid run

      - name: Publish graph in step comment
        run: cat Infra/Terramaid.md >> $GITHUB_STEP_SUMMARY 
        shell: bash

      - name: Setup Graphviz
        uses: ts-graphviz/setup-graphviz@v2        

      - name: Setup Inframap
        run: |
            curl -L -o /tmp/inframap.tar.gz "https://github.com/cycloidio/inframap/releases/download/v0.7.0/inframap-linux-amd64.tar.gz"
            tar -xzvf /tmp/inframap.tar.gz -C /tmp
            mv -v /tmp/inframap-linux-amd64 /usr/local/bin/inframap
            chmod +x /usr/local/bin/inframap
      - name: Inframap
        run: |
            cd Infra
            /usr/local/bin/inframap generate main.tf --raw | dot -Tsvg > inframap_azure.svg
      - name: Upload inframap
        id: inframap-upload-step
        uses: actions/upload-artifact@v4
        with:
          name: inframap_azure.svg
          path: Infra/inframap_azure.svg
          #compression-level: 0 # no compression

      - name: Setup Infracost
        uses: infracost/actions/setup@v3
        with:
            api-key: ${{ secrets.INFRACOST_API_KEY }}
      - name: Infracost
        run: |
            cd Infra
            infracost breakdown --path . --format html --out-file infracost-report.html
            sed -i '19,133d' infracost-report.html
            cat infracost-report.html

      - name: Convert HTML to Markdown
        id: html2markdown
        uses: rknj/html2markdown@v1.1.0
        with:
            html-file: "Infra/infracost-report.html"

      - name: Upload infracost report
        run: |
            echo "## Costos de Infraestructura" >> $GITHUB_STEP_SUMMARY
            echo ${{ steps.html2markdown.outputs.markdown-content }}
            cat ${{ steps.html2markdown.outputs.markdown-file }} >> $GITHUB_STEP_SUMMARY

    #   - name: Publish inframap in step comment
    #     run: |
    #         echo "## Infraestructura Azure" >> $GITHUB_STEP_SUMMARY
    #         echo "!"
    #         echo "![Alt text](${{ steps.inframap-upload-step.outputs.artifact-url }})" >> inframap_azure.md
    #         cat inframap_azure.md >> $GITHUB_STEP_SUMMARY

    #   - name: Upload comment to PR
    #     uses: actions/github-script@v7
    #     with:
    #       github-token: ${{ secrets.GITHUB_TOKEN }}
    #       script: |
    #         const fs = require('fs');
    #         const terramaid = fs.readFileSync('Infra/Terramaid.md', 'utf8');
    #         github.rest.issues.createComment({
    #             owner: context.repo.owner,
    #             repo: context.repo.repo,
    #             issue_number: context.issue.number,
    #             body: `## Terraform Plan\n\n${terramaid}`
    #         })


    #   - name: Terraform Plan
    #     id: plan
    #     run: cd Infra && terraform plan -no-color

    #   - uses: actions/github-script@v7
    #     if: github.event_name == 'pull_request'
    #     env:
    #       PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
    #     with:
    #       github-token: ${{ secrets.GITHUB_TOKEN }}
    #       script: |
    #         const output = `#### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
    #         #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
    #         <details><summary>Validation Output</summary>
    
    #         \`\`\`\n
    #         ${{ steps.validate.outputs.stdout }}
    #         \`\`\`
    
    #         </details>
    
    #         #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
    
    #         <details><summary>Show Plan</summary>
    
    #         \`\`\`\n
    #         ${process.env.PLAN}
    #         \`\`\`
    
    #         </details>
    
    #         *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;
    
    #         github.rest.issues.createComment({
    #         issue_number: context.issue.number,
    #         owner: context.repo.owner,
    #         repo: context.repo.repo,
    #         body: output
    #         })

    #   - name: Terraform Apply
    #     run: terraform apply -auto-approve 
